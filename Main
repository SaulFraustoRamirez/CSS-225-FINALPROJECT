import random

# This will create a named scientist to interact with
def scientist():
    global npcName
    global response
    # List of possible responses
    responses = ["Welcome to the lab.", "Are you ready to explore the multiverse?", "Do you need help with the device?"]
    npcNameChoice = ["Dr. Smith", "Dr. Johnson", "Dr. Brown", "Dr. Taylor"]
    # Shuffle the list to get a random order
    random.shuffle(npcNameChoice)
    npcName = npcNameChoice[0]
    print(f"{npcName}: Hello, I am {npcName}. Would you like to talk to me?")
    random.shuffle(responses)
    answer = input("Press 'y' to talk to the scientist: ")
    if answer == "y":
        print(f"{npcName}: {responses[0]}")
    else:
        print(f"{npcName}: Goodbye")

# Function to explore the lab and gather information
def explore_lab():
    print("You are in the lab filled with advanced technology and cryptic notes.")
    print("The holographic displays flicker as you walk by, revealing snippets of your mentor's research.")
    # Add more actions and interactions here

# Function to solve initial puzzles to activate the portal
def solve_puzzles():
    print("Solving puzzles to activate the portal...")
    print("You carefully piece together the clues left behind by your mentor.")
    # Add puzzle-solving logic here

# Function to enter the first parallel universe
def enter_parallel_universe():
    print("Entering the first parallel universe...")
    print("The portal hums to life, and you step through into the unknown.")
    # Add logic for entering the parallel universe here

# Main function to run the game
def main():
    print("Welcome to the Sci-Fi Adventure Game!")
    scientist()
    explore_lab()
    solve_puzzles()
    enter_parallel_universe()

if __name__ == "__main__":
    main()


# This will create a named scavenger to interact with
def scavenger():
    global npcName
    global response
    # List of possible responses
    responses = ["Help us repair this technology.", "Do you have any supplies?", "Watch out for the raiders!"]
    npcNameChoice = ["Sam", "Alex", "Jordan", "Taylor"]
    # Shuffle the list to get a random order
    random.shuffle(npcNameChoice)
    npcName = npcNameChoice[0]
    print(f"{npcName}: Hello, I am {npcName}. Would you like to talk to me?")
    random.shuffle(responses)
    answer = input("Press 'y' to talk to the scavenger: ")
    if answer == "y":
        print(f"{npcName}: {responses[0]}")
    else:
        print(f"{npcName}: Goodbye")

# Function to navigate through the dangerous environment
def navigate_environment():
    print("You are navigating through the dangerous environment filled with ruins and scavengers.")
    print("The air is thick with smoke, and the ground is littered with debris.")
    # Add more actions and interactions here

# Function to help survivors by repairing technology
def help_survivors():
    print("Helping survivors by repairing a crucial piece of technology...")
    print("You carefully examine the damaged device and begin making repairs.")
    # Add logic for repairing technology here

# Function to retrieve the first piece of the artifact
def retrieve_artifact():
    print("Retrieving the first piece of the artifact...")
    print("You find the artifact hidden in the ruins, its surface covered in strange symbols.")
    # Add logic for retrieving the artifact here

# Main function to run the second chapter
def chapter_two():
    print("Welcome to Chapter 2: Dystopia!")
    scavenger()
    navigate_environment()
    help_survivors()
    retrieve_artifact()

if __name__ == "__main__":
    chapter_two()


# This will create a named inhabitant to interact with
def inhabitant():
    global npcName
    global response
    # List of possible responses
    responses = ["Welcome to our utopia.", "Can you help us with a problem?", "Enjoy the harmony of our world."]
    npcNameChoice = ["Eve", "Liam", "Sophia", "Noah"]
    # Shuffle the list to get a random order
    random.shuffle(npcNameChoice)
    npcName = npcNameChoice[0]
    print(f"{npcName}: Hello, I am {npcName}. Would you like to talk to me?")
    random.shuffle(responses)
    answer = input("Press 'y' to talk to the inhabitant: ")
    if answer == "y":
        print(f"{npcName}: {responses[0]}")
    else:
        print(f"{npcName}: Goodbye")

# Function to interact with the peaceful inhabitants
def interact_inhabitants():
    print("Interacting with the peaceful inhabitants and learning about their society.")
    print("The inhabitants are friendly and eager to share their knowledge with you.")
    # Add more actions and interactions here

# Function to uncover a hidden threat
def uncover_threat():
    print("Uncovering a hidden threat that could destabilize this perfect world...")
    print("You discover a secret plot that threatens the harmony of this utopia.")
    # Add logic for uncovering the threat here

# Function to secure the second piece of the artifact
def secure_artifact():
    print("Securing the second piece of the artifact...")
    print("You find the artifact in a hidden chamber, its glow illuminating the room.")
    # Add logic for securing the artifact here

# Main function to run the third chapter
def chapter_three():
    print("Welcome to Chapter 3: Utopia!")
    inhabitant()
    interact_inhabitants()
    uncover_threat()
    secure_artifact()

if __name__ == "__main__":
    chapter_three()


# This will create a named faction leader to interact with
def faction_leader():
    global npcName
    global response
    # List of possible responses
    responses = ["We need your help in this war.", "Can you assist us with a mission?", "Stay alert, the enemy is near."]
    npcNameChoice = ["Commander Rex", "General Zara", "Captain Leo", "Lieutenant Mia"]
    # Shuffle the list to get a random order
    random.shuffle(npcNameChoice)
    npcName = npcNameChoice[0]
    print(f"{npcName}: Hello, I am {npcName}. Would you like to talk to me?")
    random.shuffle(responses)
    answer = input("Press 'y' to talk to the faction leader: ")
    if answer == "y":
        print(f"{npcName}: {responses[0]}")
    else:
        print(f"{npcName}: Goodbye")

# Function to navigate through the warzone
def navigate_warzone():
    print("You are navigating through the warzone filled with battlefields and war machines.")
    print("Explosions rock the ground as you make your way through the chaos.")
    # Add more actions and interactions here

# Function to complete missions and gain trust
def complete_missions():
    print("Completing missions to gain the trust of key figures...")
    print("You undertake dangerous missions to prove your loyalty.")
    # Add logic for completing missions here

# Function to obtain the third piece of the artifact
def obtain_artifact():
    print("Obtaining the third piece of the artifact amidst the chaos...")
    print("You find the artifact in the heart of the battlefield, its power radiating through the air.")
    # Add logic for obtaining the artifact here

# Main function to run the fourth chapter
def chapter_four():
    print("Welcome to Chapter 4: Warzone!")
    faction_leader()
    navigate_warzone()
    complete_missions()
    obtain_artifact()

if __name__ == "__main__":
    chapter_four()


# This will create a named local to interact with
def local():
    global npcName
    global response
    # List of possible responses
    responses = ["The multiverse is collapsing!", "Can you help us?", "We need to stabilize reality!"]
    npcNameChoice = ["Chris", "Jordan", "Taylor", "Morgan"]
    # Shuffle the list to get a random order
    random.shuffle(npcNameChoice)
    npcName = npcNameChoice[0]
    print(f"{npcName}: Hello, I am {npcName}. Would you like to talk to me?")
    random.shuffle(responses)
    answer = input("Press 'y' to talk to the local: ")
    if answer == "y":
        print(f"{npcName}: {responses[0]}")
    else:
        print(f"{npcName}: Goodbye")

# Function to navigate through the fractured reality
def navigate_fractured_reality():
    print("You are navigating through the fractured reality with elements from different universes merging and colliding.")
    print("The sky is a chaotic swirl of colors, and the ground shifts beneath your feet.")
    # Add more actions and interactions here

# Function to solve the final puzzles
def solve_final_puzzles():
    print("Solving the final, most challenging puzzles to stabilize the multiverse...")
    print("You encounter a series of intricate mechanisms that require both logic and intuition to solve.")
    # Add puzzle-solving logic here

# Function to assemble the artifact and restore balance
def assemble_artifact():
    print("Assembling the artifact to restore balance to the multiverse...")
    print("As you place the final piece, a blinding light envelops you, and you feel the fabric of reality begin to mend.")
    # Add logic for assembling the artifact here

# Main function to run the fifth chapter
def chapter_five():
    print("Welcome to Chapter 5: Fractured Reality!")
    local()
    navigate_fractured_reality()
    solve_final_puzzles()
    assemble_artifact()

if __name__ == "__main__":
    chapter_five()
